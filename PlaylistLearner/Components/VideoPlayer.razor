@using System.Xml
@using System.Text.Json
@using System.ComponentModel
@using System.Net
@using System.Text.RegularExpressions

@inject VideoControl Video
@inject NavigationManager NavManager
@inject HttpClient Http

<table>
    <tr style="font-size: 2rem">
        @if (IsProtected)
        {
            <td >Protected Video, please enter password <input type="password" autocomplete="one-time-code" @bind="InputPassword" @onkeyup="OnInputKeyDown"/><i @onclick="SubmitPassword" aria-label="Submit Password" class="bi bi-check2"></i></td>
        }
        else if (!Video.Ready)
        {
            <td >Loading ...</td>
        }
        else
        {
            @if (Video.HasStartedPlaying)
            {
                <td class="justify-content-start">
                    @if (Video.State == PlayerState.Playing)
                    {<i @onclick="Video.Pause" aria-label="Pause Video" class="bi bi-pause-circle"></i>}
                    else
                    {
                        @if (HasEndAndIsEnded)
                        {<i @onclick="Video.RePlay" aria-label="Replay Video" class="bi bi-arrow-counterclockwise"></i>}
                        else
                        {<i @onclick="Video.Play" aria-label="Play Video" class="bi bi-play-circle"></i>}
                    }<span>&thinsp;</span><i @onclick="Video.Back" aria-label="Skip Back" class="bi bi-skip-backward-circle"></i><span>&thinsp;</span><i @onclick="Video.Forward" aria-label="Skip Forward" class="bi bi-skip-forward-circle"></i>
                    @if (!string.IsNullOrEmpty(Item.Lesson) && Playlist.KeyedItems.ContainsKey(Item.Lesson))
                    {
                        <span>&thinsp;</span>
                        @if (ShowingLesson)
                        {
                            <i @onclick="HideLesson" aria-label="Close Lesson" class="bi bi-arrow-left-circle"></i>
                        }
                        else
                        {
                            <i @onclick="ShowLesson" aria-label="Play Lesson" class="bi bi-mortarboard"></i>
                        }
                    }
                </td>

                @if (Playlist.SpeedControls)
                {
                    <td class="justify-content-center">
                        <button type="button" aria-label="Slow Speed" @onclick="Video.Slow" class="btn btn-outline-dark">S</button>
                        <button type="button" aria-label="Medium Speed" @onclick="Video.Medium" class="btn btn-outline-dark">M</button>
                        <button type="button" aria-label="Normal Speed" @onclick="Video.Normal" class="btn btn-outline-dark">N</button>
                    </td>
                }
                <td class="justify-content-end">
                    @if (!Playlist.Silent)
                    {
                        @if (Video.Muted)
                        {
                            <i @onclick="Video.Unmute" aria-label="Toggle Mute" class="bi bi-volume-mute"></i>
                        }
                        else
                        {
                            <i @onclick="Video.Mute" aria-label="Toggle Mute" class="bi bi-volume-up"></i>
                        }
                    }
                    @if (Item.Type.Equals(ItemType.HyperLink))
                    {<span>&thinsp;</span><a href="@Item.Link.Trim()" aria-label="Open in YouTube" target="_blank"><i class="bi bi-box-arrow-up-right"></i></a>}
                    <span>&thinsp;</span><i @onclick="Close" aria-label="Close" class="bi bi-x-circle"></i>
                </td>
            }
            else
            {
                <td class="justify-content-end">
                    <i @onclick="Close" aria-label="Close" class="bi bi-x-circle"></i>
                </td>
            }
        }
    </tr>
</table>
<div>
    <div id="video-area" style="width: 50px; height:50px"></div>
</div>
@code {
    [Parameter]
    public PlaylistItem Item { get; set; }
    public PlaylistItem CurrentItem { get; set; }
    public bool ShowingLesson { get; set; }

    public Playlist Playlist => Parent.Playlist;

    public bool HasEndAndIsEnded => CurrentItem.HasEnd && Video.Time > CurrentItem.End;
    bool IsProtected => Playlist.IsProtected && !(Playlist.PassHash?.Equals(Playlist.Pass) ?? false);
    private string? InputPassword { get; set; }
    
    [CascadingParameter]
    private HashSet<string> ShowVideos { get; set; }
    [CascadingParameter]
    public PlaylistLearner.Pages.Index Parent { get; set; }

    protected async override Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    protected async override Task OnParametersSetAsync()
    {
        CurrentItem = Item;
        StateHasChanged();
        await base.OnParametersSetAsync();
    }

    async Task SubmitPassword()
    {
        if (InputPassword != null)
        {
            var cleaned = Regex.Replace(InputPassword, @"[^\w\.@-]", "",
                RegexOptions.None, TimeSpan.FromSeconds(1.5));
            if (cleaned.Equals(InputPassword))
            {
                var response = await Http.GetAsync($"/api/Hash?password={InputPassword}&salty=Salty&id=PlaylistLearner");
                Playlist.PassHash = await response.Content.ReadAsStringAsync();
                await Video.SetPass(Playlist.PassHash);
                StateHasChanged();
                if (!IsProtected)
                {
                    await Prepare();
                }
            }
            InputPassword = string.Empty;
        }
    }

    async Task OnInputKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SubmitPassword();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            await Prepare();
        }
    }

    async Task Prepare()
    {
        if (IsProtected)
        {
            return;
        }

        if (CurrentItem.Start >= 0 && CurrentItem.End > 0)
        {
            await Video.PrepareVideo(this, CurrentItem.PaddingPercent, CurrentItem.VideoId, CurrentItem.Start, CurrentItem.ExtendedEnd);
        }
        else
        {
            await Video.PrepareVideo(this, CurrentItem.PaddingPercent, CurrentItem.VideoId);
        }   
    }

    async Task ShowLesson()
    {
        if (Playlist.KeyedItems.TryGetValue(Item.Lesson, out var lessonItem))
        {
            ShowingLesson = true;
            CurrentItem = lessonItem;
            await Prepare();
        }
    }

    async Task HideLesson()
    {
        ShowingLesson = false;
        CurrentItem = Item;
        await Prepare();
    }

    public async Task OnPlayerStateChange()
    {
        if (Video.State == PlayerState.Ended && CurrentItem.HasEnd)
        {
            await Video.SeekTo(CurrentItem.Start);
//            await Video.Pause();
        }
        StateHasChanged();
    }
    
    public async Task OnTimeChange()
    {
        if (HasEndAndIsEnded)
        {
            await Video.Pause();
        }
        StateHasChanged();
    }
    
    private async Task Close()
    {
        await Video.Close();
        ShowVideos.Clear();
        Parent.RefreshState();
    }

    public void Refresh()
    {
        StateHasChanged();
    }

}