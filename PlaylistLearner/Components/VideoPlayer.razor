@using System.Xml
@using System.Text.Json

@inject IJSRuntime JsRuntime
@inject NavigationManager NavManager

<div>
    @if (!Ready)
    {
        <span>Loading ... </span>
    }
    else
    {
        if (State == PlayerState.Playing)
        {
            <button type="button" @onclick="Pause" class="btn btn-primary">Pause</button>
        }
        else
        {
            <button type="button" @onclick="Play" class="btn btn-primary">Play</button>
        }
        <button type="button" @onclick="Close" class="btn btn-primary">Close</button>
        <span>@State</span>
    }
</div>
<div style="@AspectStyle(Item.Format)">
    <iframe id="youtube-iframe" frameborder="0" style="width:100%;height:100%;position:absolute;left:0px;top:0px;" allow="autoplay;fullscreen;" 
            src="@Embed(Item.Link)">
    </iframe>
</div>

@code {
    [Parameter]
    public PlaylistItem Item { get; set; }

    public bool Ready { get; set; } = false;
    public PlayerState State { get; set; } = PlayerState.Unstarted;

    public enum PlayerState
    {
        Unstarted=-1,
        Ended=0, Playing=1, Paused=2, Buffering=3, VideoCued=4
    }
       
    [CascadingParameter]
    private HashSet<string> ShowVideos { get; set; }
    [CascadingParameter]
    public PlaylistLearner.Pages.Index Parent { get; set; }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            var dotNetObjectReference = DotNetObjectReference.Create(this);
            await JsRuntime.InvokeVoidAsync("prepareVideo", dotNetObjectReference);
        }
    }
    
    string AspectStyle(Format format)
    {
        var style = format switch
        {
            Format.Default => "position:relative;padding-bottom:56.25%;",
            Format.Mobile => "position:relative;padding-bottom:176.33%;",
            _ => throw new ArgumentOutOfRangeException(nameof(format), format, null)
            };
        if (!Ready) style += ";display: none";
        return style;
    }
    
    
    string Embed(string link)
    {
        link = link.Trim();
        link = link.Contains("watch") ? link.Replace("/watch?v=", "/embed/") : 
            link.Replace("https://youtu.be/", "https://www.youtube.com/embed/");
        link += "?autoplay=1&enablejsapi=1&controls=1&modestbranding=1&origin="+NavManager.Uri;
        if (link.EndsWith("/")) link=link[..^1];
        return link;
    }

    [JSInvokable] // This is required in order to JS be able to execute it
    public void OnPlayerStateChange(JsonElement eventData)
    {
        var text = eventData.GetRawText();
        var playerInfo=GetPlayerInfo(eventData);
        if (eventData.GetProperty("data").TryGetInt32(out var data))
        {
            State =(PlayerState)Enum.ToObject(typeof(PlayerState), data);
            StateHasChanged();
        }
        else
        {
            int a = 1;
        }

    }

    private PlayerInfo? GetPlayerInfo(JsonElement eventData)
    {
        var info= eventData.GetProperty("target").GetProperty("playerInfo").Deserialize<PlayerInfo>();
        return info;
    }

    [JSInvokable] // This is required in order to JS be able to execute it
    public void OnPlayerReady(JsonElement eventData)
    {
        // This breaks the state call back for some reason
//        var playerInfo=GetPlayerInfo(eventData);
        Ready = true;
        StateHasChanged();
    }
    
    private void Play()
    {
        JsRuntime.InvokeVoidAsync("playVideo");
    }

    private void Pause()
    {
        JsRuntime.InvokeVoidAsync("pauseVideo");
    }
    
    private void Close()
    {
        ShowVideos.Clear();
        Parent.RefreshState();
    }

    public class VideoData 
    {
        public string video_id { get; set; }
        public string author { get; set; }
        public string title { get; set; }
        public string video_quality { get; set; }
    }
    
    public class PlayerInfo 
    {
        public string videoUrl { get; set; }
        public VideoData videoData { get; set; }
    }
}