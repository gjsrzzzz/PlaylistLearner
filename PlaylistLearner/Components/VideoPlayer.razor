@using System.Xml
@using System.Text.Json
@using System.ComponentModel

@inject VideoControl Video
@inject NavigationManager NavManager

<table>
    <tr style="font-size: 2rem">
        @if (!Video.Ready)
        {
            <td >Loading ...</td>
        }
        else
        {
            @if (Video.HasStartedPlaying)
            {
                <td class="justify-content-start">
                    @if (Video.State == PlayerState.Playing)
                    {<i @onclick="Video.Pause" class="bi bi-pause-circle"></i>}
                    else
                    {
                        @if (HasEndAndIsEnded)
                        {<i @onclick="Video.RePlay" class="bi bi-arrow-counterclockwise"></i>}
                        else
                        {<i @onclick="Video.Play" class="bi bi-play-circle"></i>}
                    }<span>&thinsp;</span><i @onclick="Video.Back" class="bi bi-skip-forward-circle"></i><span>&thinsp;</span><i @onclick="Video.Forward" class="bi bi-skip-backward-circle"></i>
                </td>

                @if (Playlist.SpeedControls)
                {
                    <td class="justify-content-center">
                        <button type="button" @onclick="Video.Slow" class="btn btn-outline-dark">S</button>
                        <button type="button" @onclick="Video.Medium" class="btn btn-outline-dark">M</button>
                        <button type="button" @onclick="Video.Normal" class="btn btn-outline-dark">N</button>
                    </td>
                }
                <td class="justify-content-end">
                    @if (!Playlist.Silent)
                    {
                        @if (Video.Muted)
                        {
                            <i @onclick="Video.Unmute" class="bi bi-volume-mute"></i>
                        }
                        else
                        {
                            <i @onclick="Video.Mute" class="bi bi-volume-up"></i>
                        }
                    }
                    @if (Item.Type.Equals(ItemType.HyperLink))
                    {<span>&thinsp;</span><a href="@Item.Link.Trim()" target="_blank"><i class="bi bi-box-arrow-up-right"></i></a>}
                    <span>&thinsp;</span><i @onclick="Close" class="bi bi-x-circle"></i>
                </td>
            }
            else
            {
                <td class="justify-content-end">
                    <i @onclick="Close" class="bi bi-x-circle"></i>
                </td>
            }
        }
    </tr>
</table>
<div>
    <div id="video-area" style="width: 50px; height:50px"></div>
</div>
@code {
    [Parameter]
    public PlaylistItem Item { get; set; }

    public Playlist Playlist => Parent.Playlist;

    public bool HasEndAndIsEnded => Item.HasEnd && Video.Time > Item.End;

    [CascadingParameter]
    private HashSet<string> ShowVideos { get; set; }
    [CascadingParameter]
    public PlaylistLearner.Pages.Index Parent { get; set; }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            if (Item.Start >= 0 && Item.End > 0)
            {
                await Video.PrepareVideo(this, Item.PaddingPercent, Item.VideoId, Item.Start, Item.ExtendedEnd);
            }
            else
            {
                await Video.PrepareVideo(this, Item.PaddingPercent, Item.VideoId);
            }
        }
    }

    public async Task OnPlayerStateChange()
    {
        if (Video.State == PlayerState.Ended && Item.HasEnd)
        {
            await Video.SeekTo(Item.Start);
//            await Video.Pause();
        }
        StateHasChanged();
    }
    
    public async Task OnTimeChange()
    {
        if (HasEndAndIsEnded)
        {
            await Video.Pause();
        }
        StateHasChanged();
    }
    
    private async Task Close()
    {
        await Video.Close();
        ShowVideos.Clear();
        Parent.RefreshState();
    }

    public void Refresh()
    {
        StateHasChanged();
    }

}