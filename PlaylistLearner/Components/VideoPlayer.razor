@using System.Xml
@using System.Text.Json
@using System.ComponentModel

@inject VideoControl Video
@inject NavigationManager NavManager


<div>
    @if (!Ready)
    {
        <button type="button" class="btn btn-secondary">Loading ...</button>
    }
    else
    {
        if (HasStartedPlaying)
        {
            if (State == PlayerState.Playing)
            {
                <button type="button" @onclick="Video.Pause" class="btn btn-primary">Pause</button>
            }
            else
            {
                @if (HasEndAndIsEnded)
                {
                    <button type="button" @onclick="RePlay" class="btn btn-primary">Replay</button>
                }
                else
                {
                    <button type="button" @onclick="Video.Play" class="btn btn-primary">Play</button>
                }
            }
            <button type="button" @onclick="Video.Back" class="btn btn-primary">-10s</button>
            <button type="button" @onclick="Video.Forward" class="btn btn-primary">+10s</button>
            <button type="button" @onclick="Video.Slow" class="btn btn-primary">S</button>
            <button type="button" @onclick="Video.Medium" class="btn btn-primary">M</button>
            <button type="button" @onclick="Video.Normal" class="btn btn-primary">N</button>
            @if (Muted)
            {
                <button type="button" @onclick="Video.Unmute" class="btn btn-primary">Unmute</button>
            }
            else
            {
                <button type="button" @onclick="Video.Mute" class="btn btn-primary">Mute</button>
            }
        }
        <button type="button" @onclick="Close" class="btn btn-primary">Close</button>
        <span>@State</span>
    }
</div>
<div>
    <div id="video-area" style="width: 50px; height:50px"></div>
</div>
@code {
    [Parameter]
    public PlaylistItem Item { get; set; }

    public bool Ready { get; set; } = false;
    public bool Muted { get; set; } = false;
    public bool HasStartedPlaying { get; set; } = false;
    public double Time { get; set; } = 0;
    public PlayerState State { get; set; } = PlayerState.Unstarted;
    public bool HasEndAndIsEnded => Item.HasEnd && Time > Item.End;

    [CascadingParameter]
    private HashSet<string> ShowVideos { get; set; }
    [CascadingParameter]
    public PlaylistLearner.Pages.Index Parent { get; set; }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            if (Item.Start >= 0 && Item.End > 0)
            {
                await Video.PrepareVideo(this, Item.PaddingPercent, Item.VideoId, Item.Start, Item.ExtendedEnd);
            }
            else
            {
                await Video.PrepareVideo(this, Item.PaddingPercent, Item.VideoId);
            }
        }
    }
    
    
    public async Task RePlay()
    {
        await Video.SeekTo(Item.Start);
        await Video.Play();
    }
   
    [JSInvokable] // This is required in order to JS be able to execute it
    public async Task OnPlayerStateChange(JsonElement eventData)
    {
        if (!Video.TryGetPlayerState(eventData, out var state)) return;
        State = state;
        if (State != PlayerState.Unstarted)
        {
            Ready = true;
        }
        if (State == PlayerState.Playing)
        {
            HasStartedPlaying = true;
        }
        if (State == PlayerState.Ended && Item.HasEnd)
        {
            await Video.SeekTo(Item.Start);
//            await Video.Pause();
        }
        StateHasChanged();
    }

    [JSInvokable] // This is required in order to JS be able to execute it
    public void OnMuteChange(bool muted)
    {
        Muted = muted;  
        StateHasChanged();
    }
    
    [JSInvokable] // This is required in order to JS be able to execute it
    public async Task OnTimeChange(double time)
    {
        Time = time;
        if (HasEndAndIsEnded)
        {
            await Video.Pause();
        }
        StateHasChanged();
    }
    
    private void Close()
    {
        ShowVideos.Clear();
        Parent.RefreshState();
    }
}