@page "/"
@using PlaylistLearner.Components
@using Jalindi.VideoUtil.Model
@inject IJSRuntime JsRuntime
@inject PlaylistService PlaylistService
@inject HttpClient Http


<HeadContent>
        <link href="@(Http.BaseAddress)api/manifest.json" rel="manifest" />
</HeadContent>

@if (Manifest != null)
{
    <PageTitle>@Manifest.short_name</PageTitle>
}
@if (Playlist == null)
{
    <p>Loading Playlist ...</p>
}
else
{
    <h1 style="font-size: 32pt">@Playlist.Name</h1>
    @if (!string.IsNullOrEmpty(Playlist.Description))
    {
        <p>@Playlist.Description</p>
    }
    @if (!string.IsNullOrEmpty(Playlist.Link))
    {
        <p><a target="_blank" href="@Playlist.Link">@Playlist.LinkText</a> </p>
    }

    <div class="p-0 m-0">
        <CascadingValue Value="@ShowVideos">
            <CascadingValue Value="@this">
                @foreach (var item in Playlist.Items)
                {
                    <ItemCard Item="@item"/>
                }
            </CascadingValue>
        </CascadingValue>
    </div>
}

@code
{
    private HashSet<string> ShowVideos { get; } = new();
    public int Height { get; set; }
    public int Width { get; set; }
    public Playlist? Playlist { get; set; }
    public Manifest? Manifest { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Manifest = await Http.GetFromJsonAsync<Manifest>("/api/manifest.json");
#pragma warning disable CS4014
        InvokeAsync(() =>
#pragma warning restore CS4014
        {
            StateHasChanged();
        });
        var dimension = await JsRuntime.InvokeAsync<WindowDimension>("getDimensions");
        Height = dimension.Height;
        Width = dimension.Width;
        Playlist=await PlaylistService.GetPlaylist();
        await base.OnInitializedAsync();
    }


    public void RefreshState(){
        this.StateHasChanged();
    }

    public class WindowDimension
    {
        public int Width { get; set; }
        public int Height { get; set; }
    }
}
