@page "/"
@using PlaylistLearner.Components
@using Jalindi.VideoUtil.Model
@inject IJSRuntime JsRuntime
@inject PlaylistService PlaylistService
@inject HttpClient Http


<HeadContent>
    <link href="@(Http.BaseAddress)api/manifest.json" rel="manifest" />
    @if (Manifest != null)
    {
        <link rel="apple-touch-icon" sizes="512x512" href="@Manifest.IconDir/icon-512.png" />
        <link rel="icon" type="image/x-icon" href="@Manifest.IconDir/favicon.ico">
    }
</HeadContent>

@if (Manifest != null)
{
    <PageTitle>@Manifest.short_name</PageTitle>
}
@if (Playlist == null)
{
    <p>@LoadingMessage</p>
}
else
{
    <h1 style="font-size: 32pt">@Playlist.Name</h1>
    @if (!string.IsNullOrEmpty(Playlist.Description))
    {
        <p>@Playlist.Description</p>
    }
    @if (!string.IsNullOrEmpty(Playlist.Link))
    {
        <p><a target="_blank" href="@Playlist.Link">@Playlist.LinkText</a>&nbsp; 
            @if (!ShowAbout)
          {
              <a href="" @onclick="DoShowAbout" @onclick:preventDefault target="_blank">About</a>
          }</p>
    }
    else
    {
        @if (!ShowAbout)
        {
            <a href="" @onclick="DoShowAbout" @onclick:preventDefault target="_blank">About</a>
        }
    }
    @if (ShowAbout)
    {
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">About</h5>
                        <button type="button" @onclick="CloseAbout" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <About></About>
                    </div>
                </div>
            </div>
    }
    <div class="p-0 m-0">
        <CascadingValue Value="@ShowVideos">
            <CascadingValue Value="@this">
                @foreach (var item in Playlist.Items)
                {
                    <ItemCard Item="@item"/>
                }
            </CascadingValue>
        </CascadingValue>
    </div>
}

@code
{
    private HashSet<string> ShowVideos { get; } = new();
    public int Height { get; set; }
    public int Width { get; set; }
    public Playlist? Playlist { get; set; } 
    public Manifest? Manifest { get; set; }
    public bool ShowAbout { get; set; }
    private string LoadingMessage { get; set; }= "Loading Playlist ...";

    void DoShowAbout()
    {
        ShowAbout = true;
    }

    void CloseAbout()
    {
        ShowAbout = false;
    }

    protected override async Task OnInitializedAsync()
    {
        Manifest = await Http.GetFromJsonAsync<Manifest>("/api/manifest.json");
#pragma warning disable CS4014
        InvokeAsync(() =>
#pragma warning restore CS4014
        {
            StateHasChanged();
        });
        var dimension = await JsRuntime.InvokeAsync<WindowDimension>("getDimensions");
        Height = dimension.Height;
        Width = dimension.Width;
        try
        {
            Playlist=await PlaylistService.GetPlaylist();
            Playlist.PassHash = await JsRuntime.InvokeAsync<string>("localStorage.getItem", "pass");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            Console.WriteLine(e.StackTrace);
            LoadingMessage = $"Failed to load {PlaylistService.PlaylistId} {e.Message}";
        }


        await base.OnInitializedAsync();
    }


    public void RefreshState(){
        this.StateHasChanged();
    }

    public class WindowDimension
    {
        public int Width { get; set; }
        public int Height { get; set; }
    }
}
